diff -crN igo-0.4.2-src/src/net/reduls/igo/dictionary/WordDic.java igo-0.4.2-gae/src/net/reduls/igo/dictionary/WordDic.java
*** igo-0.4.2-src/src/net/reduls/igo/dictionary/WordDic.java	2010-03-29 09:25:40.000000000 +0900
--- igo-0.4.2-gae/src/net/reduls/igo/dictionary/WordDic.java	2010-10-07 12:58:27.000000000 +0900
***************
*** 17,23 ****
  
      public WordDic(String dataDir) throws IOException {
  	trie    = new Searcher(dataDir+"/word2id");
! 	data    = FileMappedInputStream.getString(dataDir+"/word.dat");
  	indices = FileMappedInputStream.getIntArray(dataDir+"/word.ary.idx");
  	
  	{
--- 17,25 ----
  
      public WordDic(String dataDir) throws IOException {
  	trie    = new Searcher(dataDir+"/word2id");
! 	data    = FileMappedInputStream.getString(dataDir+"/word.dat.1")+
!                   FileMappedInputStream.getString(dataDir+"/word.dat.2")+
!                   FileMappedInputStream.getString(dataDir+"/word.dat.3");
  	indices = FileMappedInputStream.getIntArray(dataDir+"/word.ary.idx");
  	
  	{
diff -crN igo-0.4.2-src/src/net/reduls/igo/dictionary/build/WordDic.java igo-0.4.2-gae/src/net/reduls/igo/dictionary/build/WordDic.java
*** igo-0.4.2-src/src/net/reduls/igo/dictionary/build/WordDic.java	2010-03-29 18:35:02.000000000 +0900
--- igo-0.4.2-gae/src/net/reduls/igo/dictionary/build/WordDic.java	2010-10-07 13:18:09.000000000 +0900
***************
*** 131,143 ****
  	}
  
  	// 単語データを出力
! 	final FileMappedOutputStream fmosDat = 
! 	    new FileMappedOutputStream(outputDir+"/word.dat", wdat.length()*2);
! 	try {
! 	    fmosDat.putString(wdat.toString());
! 	} finally {
! 	    fmosDat.close();
! 	}
  	
  	// 単語情報の配列へのインデックスを保存する
  	{ 
--- 131,147 ----
  	}
  
  	// 単語データを出力
!         final int[] wdatLens = {wdat.length()/3, wdat.length()/3, wdat.length()/3+wdat.length()%3};
!         final int[] wdatBegs = {0, wdat.length()/3, wdat.length()/3*2};
!         for(int i=0; i < 3; i++) {
!             final FileMappedOutputStream fmosDat = 
!                 new FileMappedOutputStream(outputDir+"/word.dat."+(i+1), wdatLens[i]*2);
!             try {
!                 fmosDat.putString(wdat.substring(wdatBegs[i],wdatBegs[i]+wdatLens[i]).toString());
!             } finally {
!                 fmosDat.close();
!             }
!         }
  	
  	// 単語情報の配列へのインデックスを保存する
  	{ 
diff -crN igo-0.4.2-src/src/net/reduls/igo/util/FileMappedInputStream.java igo-0.4.2-gae/src/net/reduls/igo/util/FileMappedInputStream.java
*** igo-0.4.2-src/src/net/reduls/igo/util/FileMappedInputStream.java	2010-03-29 18:35:02.000000000 +0900
--- igo-0.4.2-gae/src/net/reduls/igo/util/FileMappedInputStream.java	2010-10-09 18:57:47.662956449 +0900
***************
*** 6,35 ****
  import java.nio.ByteOrder;
  import java.nio.channels.FileChannel;
  
  /**
   * ファイルにマッピングされた入力ストリーム<br />
   * net.reduls.igo以下のパッケージではファイルからバイナリデータを取得する場合、必ずこのクラスが使用される
   */
  public final class FileMappedInputStream {
!     private final FileChannel cnl;
!     private int cur=0;
! 
      /**
       * 入力ストリームを作成する
       * 
       * @param filepath マッピングするファイルのパス
       */
      public FileMappedInputStream(String filepath) throws IOException {
! 	cnl = new FileInputStream(filepath).getChannel();
      }
  
      public int getInt() throws IOException {
! 	return map(4).getInt();
      }
      
      public int[] getIntArray(int elementCount) throws IOException {
  	final int[] ary = new int[elementCount];
! 	map(elementCount*4).asIntBuffer().get(ary);
  	return ary;
      }
      
--- 6,50 ----
  import java.nio.ByteOrder;
  import java.nio.channels.FileChannel;
  
+ import java.io.File;
+ import java.io.DataInputStream;
+ import java.io.BufferedInputStream;
+ import java.io.EOFException;
+ import java.util.zip.GZIPInputStream;
+ 
  /**
   * ファイルにマッピングされた入力ストリーム<br />
   * net.reduls.igo以下のパッケージではファイルからバイナリデータを取得する場合、必ずこのクラスが使用される
   */
  public final class FileMappedInputStream {
!     private final DataInputStream dis;
!     private final int fileSize;
      /**
       * 入力ストリームを作成する
       * 
       * @param filepath マッピングするファイルのパス
       */
      public FileMappedInputStream(String filepath) throws IOException {
!         dis = new DataInputStream(new BufferedInputStream(new FileInputStream(filepath)));
!         fileSize = (int)new File(filepath).length();
      }
  
      public int getInt() throws IOException {
!         return dis.readInt();
!     }
! 
!     public short getShort() throws IOException {
!         return dis.readShort();
!     }
! 
!     public char getChar() throws IOException {
!         return dis.readChar();
      }
      
      public int[] getIntArray(int elementCount) throws IOException {
  	final int[] ary = new int[elementCount];
!         for(int i=0; i < elementCount; i++)
!             ary[i] = getInt();
  	return ary;
      }
      
***************
*** 44,84 ****
  
      public short[] getShortArray(int elementCount) throws IOException {
  	final short[] ary = new short[elementCount];
! 	map(elementCount*2).asShortBuffer().get(ary);
  	return ary;
      }
  
      public char[] getCharArray(int elementCount) throws IOException {
  	final char[] ary = new char[elementCount];
! 	map(elementCount*2).asCharBuffer().get(ary);
  	return ary;
      }
  
      public String getString(int elementCount) throws IOException {
! 	return map(elementCount*2).asCharBuffer().toString();
      }
  
      public static String getString(String filepath) throws IOException {
  	final FileMappedInputStream fmis = new FileMappedInputStream(filepath);
  	try {
! 	    return fmis.getString(fmis.size()/2);
  	} finally {
  	    fmis.close();
  	}
      }
  
      public int size() throws IOException {
! 	return (int)cnl.size();
      }
  
      public void close() {
  	try {
! 	    cnl.close();
  	} catch (IOException e) {}
      }
! 
!     private ByteBuffer map(int size) throws IOException {
! 	cur += size;
! 	return cnl.map(FileChannel.MapMode.READ_ONLY, cur-size, size).order(ByteOrder.nativeOrder());
!     }
! }
\ ファイル末尾に改行がありません
--- 59,104 ----
  
      public short[] getShortArray(int elementCount) throws IOException {
  	final short[] ary = new short[elementCount];
!         for(int i=0; i < elementCount; i++)
!             ary[i] = getShort();
  	return ary;
      }
  
      public char[] getCharArray(int elementCount) throws IOException {
  	final char[] ary = new char[elementCount];
!         for(int i=0; i < elementCount; i++)
!             ary[i] = getChar();
  	return ary;
      }
  
      public String getString(int elementCount) throws IOException {
!         StringBuilder sb = new StringBuilder(elementCount);
!         for(int i=0; i < elementCount; i++)
!             sb.append(dis.readChar());
!         return sb.toString();
      }
  
      public static String getString(String filepath) throws IOException {
  	final FileMappedInputStream fmis = new FileMappedInputStream(filepath);
  	try {
!             StringBuilder sb = new StringBuilder(fmis.size());
!             try {
!                 for(;;)
!                     sb.append(fmis.getChar());
!             } catch (EOFException e) {}
!             return sb.toString();
  	} finally {
  	    fmis.close();
  	}
      }
  
      public int size() throws IOException {
! 	return fileSize;
      }
  
      public void close() {
  	try {
! 	    dis.close();
  	} catch (IOException e) {}
      }
! }
diff -crN igo-0.4.2-src/src/net/reduls/igo/util/FileMappedOutputStream.java igo-0.4.2-gae/src/net/reduls/igo/util/FileMappedOutputStream.java
*** igo-0.4.2-src/src/net/reduls/igo/util/FileMappedOutputStream.java	2010-03-29 18:35:02.000000000 +0900
--- igo-0.4.2-gae/src/net/reduls/igo/util/FileMappedOutputStream.java	2010-10-06 17:22:58.000000000 +0900
***************
*** 26,32 ****
  	final FileChannel cnl = new RandomAccessFile(filepath,"rw").getChannel();
  	try {
  	    mbb = cnl.map(FileChannel.MapMode.READ_WRITE, 0, size);
! 	    mbb.order(ByteOrder.nativeOrder());
  	} finally {
  	    cnl.close();
  	}
--- 26,32 ----
  	final FileChannel cnl = new RandomAccessFile(filepath,"rw").getChannel();
  	try {
  	    mbb = cnl.map(FileChannel.MapMode.READ_WRITE, 0, size);
! 	    mbb.order(ByteOrder.BIG_ENDIAN);
  	} finally {
  	    cnl.close();
  	}

